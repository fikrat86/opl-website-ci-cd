name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-website
  ECS_SERVICE: opl-website-service
  ECS_CLUSTER: opl-cluster

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # The version tag is now a variable that can be reused
      - name: Build, tag, and push image to Amazon ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}  # Use a unique Git SHA as the tag
        run: |
          # Use the ECR registry and a unique tag from the environment
          FULL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Building image $FULL_IMAGE_NAME"
          docker build -t $FULL_IMAGE_NAME .
          echo "Pushing image $FULL_IMAGE_NAME to ECR"
          docker push $FULL_IMAGE_NAME
          # Output the full image name for the next step to use
          echo "::set-output name=image::$FULL_IMAGE_NAME"
          
      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # This must be the path to your JSON file, not the family name.
          task-definition: task-definition.json
          container-name: opl-website-container
          # Use the output from the previous step for the new image tag
          image: ${{ steps.build-and-push.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
