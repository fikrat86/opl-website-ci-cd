# This workflow uses the OIDC trust policy to securely assume an IAM role.
name: Deploy to ECS with Assume Role

on:
  push:
    branches:
      - main

# The permissions block is required for OIDC to generate a token.
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # The configure-aws-credentials action is the key step.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # Use the correct role name from your IAM roles list.
          role-to-assume: "arn:aws:iam::949848044200:role/opl-ecs-task-role"
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_URI="949848044200.dkr.ecr.us-east-1.amazonaws.com/my-website:latest"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Fill in the new image in the task definition
        id: fill-in-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: opl-website-container
          image: "949848044200.dkr.ecr.us-east-1.amazonaws.com/my-website:latest"

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.fill-in-task-def.outputs.task-definition }}
          service: opl-website-service
          cluster: opl-website-cluster
          wait-for-service-stability: true
